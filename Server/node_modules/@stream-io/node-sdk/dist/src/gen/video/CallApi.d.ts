import { VideoApi } from './VideoApi';
import { StreamResponse } from '../../types';
import { BlockUserRequest, BlockUserResponse, CollectUserFeedbackRequest, CollectUserFeedbackResponse, DeleteCallRequest, DeleteCallResponse, DeleteRecordingResponse, DeleteTranscriptionResponse, EndCallResponse, GetCallReportResponse, GetCallResponse, GetOrCreateCallRequest, GetOrCreateCallResponse, GoLiveRequest, GoLiveResponse, ListRecordingsResponse, ListTranscriptionsResponse, MuteUsersRequest, MuteUsersResponse, PinRequest, PinResponse, QueryCallParticipantsRequest, QueryCallParticipantsResponse, SendCallEventRequest, SendCallEventResponse, StartClosedCaptionsRequest, StartClosedCaptionsResponse, StartFrameRecordingRequest, StartFrameRecordingResponse, StartHLSBroadcastingResponse, StartRTMPBroadcastsRequest, StartRTMPBroadcastsResponse, StartRecordingRequest, StartRecordingResponse, StartTranscriptionRequest, StartTranscriptionResponse, StopAllRTMPBroadcastsResponse, StopClosedCaptionsRequest, StopClosedCaptionsResponse, StopFrameRecordingResponse, StopHLSBroadcastingResponse, StopLiveRequest, StopLiveResponse, StopRTMPBroadcastsRequest, StopRTMPBroadcastsResponse, StopRecordingResponse, StopTranscriptionRequest, StopTranscriptionResponse, UnblockUserRequest, UnblockUserResponse, UnpinRequest, UnpinResponse, UpdateCallMembersRequest, UpdateCallMembersResponse, UpdateCallRequest, UpdateCallResponse, UpdateUserPermissionsRequest, UpdateUserPermissionsResponse } from '../models';
export declare class CallApi {
    protected videoApi: VideoApi;
    readonly type: string;
    readonly id: string;
    constructor(videoApi: VideoApi, type: string, id: string);
    get: (request?: {
        members_limit?: number;
        ring?: boolean;
        notify?: boolean;
        video?: boolean;
    }) => Promise<StreamResponse<GetCallResponse>>;
    update: (request?: UpdateCallRequest) => Promise<StreamResponse<UpdateCallResponse>>;
    getOrCreate: (request?: GetOrCreateCallRequest) => Promise<StreamResponse<GetOrCreateCallResponse>>;
    blockUser: (request: BlockUserRequest) => Promise<StreamResponse<BlockUserResponse>>;
    delete: (request?: DeleteCallRequest) => Promise<StreamResponse<DeleteCallResponse>>;
    sendCallEvent: (request?: SendCallEventRequest) => Promise<StreamResponse<SendCallEventResponse>>;
    collectUserFeedback: (request: CollectUserFeedbackRequest) => Promise<StreamResponse<CollectUserFeedbackResponse>>;
    goLive: (request?: GoLiveRequest) => Promise<StreamResponse<GoLiveResponse>>;
    end: () => Promise<StreamResponse<EndCallResponse>>;
    updateCallMembers: (request?: UpdateCallMembersRequest) => Promise<StreamResponse<UpdateCallMembersResponse>>;
    muteUsers: (request?: MuteUsersRequest) => Promise<StreamResponse<MuteUsersResponse>>;
    queryCallParticipants: (request?: QueryCallParticipantsRequest & {
        limit?: number;
    }) => Promise<StreamResponse<QueryCallParticipantsResponse>>;
    videoPin: (request: PinRequest) => Promise<StreamResponse<PinResponse>>;
    listRecordings: () => Promise<StreamResponse<ListRecordingsResponse>>;
    getCallReport: (request?: {
        session_id?: string;
    }) => Promise<StreamResponse<GetCallReportResponse>>;
    startRTMPBroadcasts: (request: StartRTMPBroadcastsRequest) => Promise<StreamResponse<StartRTMPBroadcastsResponse>>;
    stopAllRTMPBroadcasts: () => Promise<StreamResponse<StopAllRTMPBroadcastsResponse>>;
    stopRTMPBroadcast: (request: StopRTMPBroadcastsRequest & {
        name: string;
    }) => Promise<StreamResponse<StopRTMPBroadcastsResponse>>;
    startHLSBroadcasting: () => Promise<StreamResponse<StartHLSBroadcastingResponse>>;
    startClosedCaptions: (request?: StartClosedCaptionsRequest) => Promise<StreamResponse<StartClosedCaptionsResponse>>;
    startFrameRecording: (request?: StartFrameRecordingRequest) => Promise<StreamResponse<StartFrameRecordingResponse>>;
    startRecording: (request?: StartRecordingRequest) => Promise<StreamResponse<StartRecordingResponse>>;
    startTranscription: (request?: StartTranscriptionRequest) => Promise<StreamResponse<StartTranscriptionResponse>>;
    stopHLSBroadcasting: () => Promise<StreamResponse<StopHLSBroadcastingResponse>>;
    stopClosedCaptions: (request?: StopClosedCaptionsRequest) => Promise<StreamResponse<StopClosedCaptionsResponse>>;
    stopFrameRecording: () => Promise<StreamResponse<StopFrameRecordingResponse>>;
    stopLive: (request?: StopLiveRequest) => Promise<StreamResponse<StopLiveResponse>>;
    stopRecording: () => Promise<StreamResponse<StopRecordingResponse>>;
    stopTranscription: (request?: StopTranscriptionRequest) => Promise<StreamResponse<StopTranscriptionResponse>>;
    listTranscriptions: () => Promise<StreamResponse<ListTranscriptionsResponse>>;
    unblockUser: (request: UnblockUserRequest) => Promise<StreamResponse<UnblockUserResponse>>;
    videoUnpin: (request: UnpinRequest) => Promise<StreamResponse<UnpinResponse>>;
    updateUserPermissions: (request: UpdateUserPermissionsRequest) => Promise<StreamResponse<UpdateUserPermissionsResponse>>;
    deleteRecording: (request: {
        session: string;
        filename: string;
    }) => Promise<StreamResponse<DeleteRecordingResponse>>;
    deleteTranscription: (request: {
        session: string;
        filename: string;
    }) => Promise<StreamResponse<DeleteTranscriptionResponse>>;
}
