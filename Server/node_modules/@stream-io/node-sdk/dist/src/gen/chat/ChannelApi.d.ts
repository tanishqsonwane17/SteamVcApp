import { ChatApi } from './ChatApi';
import { StreamResponse } from '../../types';
import { ChannelGetOrCreateRequest, ChannelStateResponse, DeleteChannelResponse, EventResponse, FileUploadRequest, FileUploadResponse, GetDraftResponse, GetManyMessagesResponse, HideChannelRequest, HideChannelResponse, ImageUploadRequest, ImageUploadResponse, MarkReadRequest, MarkReadResponse, MarkUnreadRequest, Response, SendEventRequest, SendMessageRequest, SendMessageResponse, ShowChannelRequest, ShowChannelResponse, TruncateChannelRequest, TruncateChannelResponse, UpdateChannelPartialRequest, UpdateChannelPartialResponse, UpdateChannelRequest, UpdateChannelResponse, UpdateMemberPartialRequest, UpdateMemberPartialResponse } from '../models';
export declare class ChannelApi {
    protected chatApi: ChatApi;
    readonly type: string;
    id?: string | undefined;
    constructor(chatApi: ChatApi, type: string, id?: string | undefined);
    delete: (request?: {
        hard_delete?: boolean;
    }) => Promise<StreamResponse<DeleteChannelResponse>>;
    updateChannelPartial: (request?: UpdateChannelPartialRequest) => Promise<StreamResponse<UpdateChannelPartialResponse>>;
    update: (request?: UpdateChannelRequest) => Promise<StreamResponse<UpdateChannelResponse>>;
    deleteDraft: (request?: {
        parent_id?: string;
        user_id?: string;
    }) => Promise<StreamResponse<Response>>;
    getDraft: (request?: {
        parent_id?: string;
        user_id?: string;
    }) => Promise<StreamResponse<GetDraftResponse>>;
    sendEvent: (request: SendEventRequest) => Promise<StreamResponse<EventResponse>>;
    deleteFile: (request?: {
        url?: string;
    }) => Promise<StreamResponse<Response>>;
    uploadFile: (request?: FileUploadRequest) => Promise<StreamResponse<FileUploadResponse>>;
    hide: (request?: HideChannelRequest) => Promise<StreamResponse<HideChannelResponse>>;
    deleteImage: (request?: {
        url?: string;
    }) => Promise<StreamResponse<Response>>;
    uploadImage: (request?: ImageUploadRequest) => Promise<StreamResponse<ImageUploadResponse>>;
    updateMemberPartial: (request?: UpdateMemberPartialRequest & {
        user_id?: string;
    }) => Promise<StreamResponse<UpdateMemberPartialResponse>>;
    sendMessage: (request: SendMessageRequest) => Promise<StreamResponse<SendMessageResponse>>;
    getManyMessages: (request: {
        ids: string[];
    }) => Promise<StreamResponse<GetManyMessagesResponse>>;
    getOrCreate: (request?: ChannelGetOrCreateRequest) => Promise<StreamResponse<ChannelStateResponse>>;
    markRead: (request?: MarkReadRequest) => Promise<StreamResponse<MarkReadResponse>>;
    show: (request?: ShowChannelRequest) => Promise<StreamResponse<ShowChannelResponse>>;
    truncate: (request?: TruncateChannelRequest) => Promise<StreamResponse<TruncateChannelResponse>>;
    markUnread: (request?: MarkUnreadRequest) => Promise<StreamResponse<Response>>;
}
