import { BaseApi } from '../../BaseApi';
import { StreamResponse } from '../../types';
import { CampaignResponse, CastPollVoteRequest, ChannelGetOrCreateRequest, ChannelStateResponse, CommitMessageRequest, CreateChannelTypeRequest, CreateChannelTypeResponse, CreateCommandRequest, CreateCommandResponse, CreatePollOptionRequest, CreatePollRequest, DeleteChannelResponse, DeleteChannelsRequest, DeleteChannelsResponse, DeleteCommandResponse, DeleteMessageResponse, DeleteReactionResponse, DeleteSegmentTargetsRequest, EventResponse, ExportChannelsRequest, ExportChannelsResponse, FileUploadRequest, FileUploadResponse, GetCampaignResponse, GetChannelTypeResponse, GetCommandResponse, GetDraftResponse, GetManyMessagesResponse, GetMessageResponse, GetReactionsResponse, GetRepliesResponse, GetSegmentResponse, GetThreadResponse, HideChannelRequest, HideChannelResponse, ImageUploadRequest, ImageUploadResponse, ListChannelTypesResponse, ListCommandsResponse, MarkChannelsReadRequest, MarkReadRequest, MarkReadResponse, MarkUnreadRequest, MembersResponse, MessageActionRequest, MessageResponse, MuteChannelRequest, MuteChannelResponse, PollOptionResponse, PollResponse, PollVoteResponse, PollVotesResponse, QueryBannedUsersPayload, QueryBannedUsersResponse, QueryCampaignsRequest, QueryCampaignsResponse, QueryChannelsRequest, QueryChannelsResponse, QueryDraftsRequest, QueryDraftsResponse, QueryMembersPayload, QueryMessageFlagsPayload, QueryMessageFlagsResponse, QueryMessageHistoryRequest, QueryMessageHistoryResponse, QueryPollVotesRequest, QueryPollsRequest, QueryPollsResponse, QueryReactionsRequest, QueryReactionsResponse, QuerySegmentTargetsRequest, QuerySegmentTargetsResponse, QuerySegmentsRequest, QuerySegmentsResponse, QueryThreadsRequest, QueryThreadsResponse, Response, SearchPayload, SearchResponse, SendEventRequest, SendMessageRequest, SendMessageResponse, SendReactionRequest, SendReactionResponse, SendUserCustomEventRequest, ShowChannelRequest, ShowChannelResponse, SortParamRequest, StartCampaignRequest, StartCampaignResponse, StopCampaignRequest, TranslateMessageRequest, TruncateChannelRequest, TruncateChannelResponse, UnmuteChannelRequest, UnmuteResponse, UnreadCountsBatchRequest, UnreadCountsBatchResponse, UpdateChannelPartialRequest, UpdateChannelPartialResponse, UpdateChannelRequest, UpdateChannelResponse, UpdateChannelTypeRequest, UpdateChannelTypeResponse, UpdateCommandRequest, UpdateCommandResponse, UpdateMemberPartialRequest, UpdateMemberPartialResponse, UpdateMessagePartialRequest, UpdateMessagePartialResponse, UpdateMessageRequest, UpdateMessageResponse, UpdatePollOptionRequest, UpdatePollPartialRequest, UpdatePollRequest, UpdateThreadPartialRequest, UpdateThreadPartialResponse, UpsertPushPreferencesRequest, UpsertPushPreferencesResponse, WrappedUnreadCountsResponse } from '../models';
export declare class ChatApi extends BaseApi {
    queryCampaigns: (request?: QueryCampaignsRequest) => Promise<StreamResponse<QueryCampaignsResponse>>;
    getCampaign: (request: {
        id: string;
        prev?: string;
        next?: string;
        limit?: number;
    }) => Promise<StreamResponse<GetCampaignResponse>>;
    startCampaign: (request: StartCampaignRequest & {
        id: string;
    }) => Promise<StreamResponse<StartCampaignResponse>>;
    scheduleCampaign: (request: StopCampaignRequest & {
        id: string;
    }) => Promise<StreamResponse<CampaignResponse>>;
    queryChannels: (request?: QueryChannelsRequest) => Promise<StreamResponse<QueryChannelsResponse>>;
    deleteChannels: (request: DeleteChannelsRequest) => Promise<StreamResponse<DeleteChannelsResponse>>;
    markChannelsRead: (request?: MarkChannelsReadRequest) => Promise<StreamResponse<MarkReadResponse>>;
    getOrCreateDistinctChannel: (request: ChannelGetOrCreateRequest & {
        type: string;
    }) => Promise<StreamResponse<ChannelStateResponse>>;
    deleteChannel: (request: {
        type: string;
        id: string;
        hard_delete?: boolean;
    }) => Promise<StreamResponse<DeleteChannelResponse>>;
    updateChannelPartial: (request: UpdateChannelPartialRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UpdateChannelPartialResponse>>;
    updateChannel: (request: UpdateChannelRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UpdateChannelResponse>>;
    deleteDraft: (request: {
        type: string;
        id: string;
        parent_id?: string;
        user_id?: string;
    }) => Promise<StreamResponse<Response>>;
    getDraft: (request: {
        type: string;
        id: string;
        parent_id?: string;
        user_id?: string;
    }) => Promise<StreamResponse<GetDraftResponse>>;
    sendEvent: (request: SendEventRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<EventResponse>>;
    deleteFile: (request: {
        type: string;
        id: string;
        url?: string;
    }) => Promise<StreamResponse<Response>>;
    uploadFile: (request: FileUploadRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<FileUploadResponse>>;
    hideChannel: (request: HideChannelRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<HideChannelResponse>>;
    deleteImage: (request: {
        type: string;
        id: string;
        url?: string;
    }) => Promise<StreamResponse<Response>>;
    uploadImage: (request: ImageUploadRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<ImageUploadResponse>>;
    updateMemberPartial: (request: UpdateMemberPartialRequest & {
        type: string;
        id: string;
        user_id?: string;
    }) => Promise<StreamResponse<UpdateMemberPartialResponse>>;
    sendMessage: (request: SendMessageRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<SendMessageResponse>>;
    getManyMessages: (request: {
        type: string;
        id: string;
        ids: string[];
    }) => Promise<StreamResponse<GetManyMessagesResponse>>;
    getOrCreateChannel: (request: ChannelGetOrCreateRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<ChannelStateResponse>>;
    markRead: (request: MarkReadRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<MarkReadResponse>>;
    showChannel: (request: ShowChannelRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<ShowChannelResponse>>;
    truncateChannel: (request: TruncateChannelRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<TruncateChannelResponse>>;
    markUnread: (request: MarkUnreadRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<Response>>;
    listChannelTypes: () => Promise<StreamResponse<ListChannelTypesResponse>>;
    createChannelType: (request: CreateChannelTypeRequest) => Promise<StreamResponse<CreateChannelTypeResponse>>;
    deleteChannelType: (request: {
        name: string;
    }) => Promise<StreamResponse<Response>>;
    getChannelType: (request: {
        name: string;
    }) => Promise<StreamResponse<GetChannelTypeResponse>>;
    updateChannelType: (request: UpdateChannelTypeRequest & {
        name: string;
    }) => Promise<StreamResponse<UpdateChannelTypeResponse>>;
    listCommands: () => Promise<StreamResponse<ListCommandsResponse>>;
    createCommand: (request: CreateCommandRequest) => Promise<StreamResponse<CreateCommandResponse>>;
    deleteCommand: (request: {
        name: string;
    }) => Promise<StreamResponse<DeleteCommandResponse>>;
    getCommand: (request: {
        name: string;
    }) => Promise<StreamResponse<GetCommandResponse>>;
    updateCommand: (request: UpdateCommandRequest & {
        name: string;
    }) => Promise<StreamResponse<UpdateCommandResponse>>;
    queryDrafts: (request?: QueryDraftsRequest) => Promise<StreamResponse<QueryDraftsResponse>>;
    exportChannels: (request: ExportChannelsRequest) => Promise<StreamResponse<ExportChannelsResponse>>;
    queryMembers: (request?: {
        payload?: QueryMembersPayload;
    }) => Promise<StreamResponse<MembersResponse>>;
    queryMessageHistory: (request: QueryMessageHistoryRequest) => Promise<StreamResponse<QueryMessageHistoryResponse>>;
    deleteMessage: (request: {
        id: string;
        hard?: boolean;
        deleted_by?: string;
    }) => Promise<StreamResponse<DeleteMessageResponse>>;
    getMessage: (request: {
        id: string;
        show_deleted_message?: boolean;
    }) => Promise<StreamResponse<GetMessageResponse>>;
    updateMessage: (request: UpdateMessageRequest & {
        id: string;
    }) => Promise<StreamResponse<UpdateMessageResponse>>;
    updateMessagePartial: (request: UpdateMessagePartialRequest & {
        id: string;
    }) => Promise<StreamResponse<UpdateMessagePartialResponse>>;
    runMessageAction: (request: MessageActionRequest & {
        id: string;
    }) => Promise<StreamResponse<MessageResponse>>;
    commitMessage: (request: CommitMessageRequest & {
        id: string;
    }) => Promise<StreamResponse<MessageResponse>>;
    sendReaction: (request: SendReactionRequest & {
        id: string;
    }) => Promise<StreamResponse<SendReactionResponse>>;
    deleteReaction: (request: {
        id: string;
        type: string;
        user_id?: string;
    }) => Promise<StreamResponse<DeleteReactionResponse>>;
    getReactions: (request: {
        id: string;
        limit?: number;
        offset?: number;
    }) => Promise<StreamResponse<GetReactionsResponse>>;
    queryReactions: (request: QueryReactionsRequest & {
        id: string;
    }) => Promise<StreamResponse<QueryReactionsResponse>>;
    translateMessage: (request: TranslateMessageRequest & {
        id: string;
    }) => Promise<StreamResponse<MessageResponse>>;
    undeleteMessage: (request: UpdateMessageRequest & {
        id: string;
    }) => Promise<StreamResponse<UpdateMessageResponse>>;
    castPollVote: (request: CastPollVoteRequest & {
        message_id: string;
        poll_id: string;
    }) => Promise<StreamResponse<PollVoteResponse>>;
    removePollVote: (request: {
        message_id: string;
        poll_id: string;
        vote_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<PollVoteResponse>>;
    getReplies: (request: {
        parent_id: string;
        limit?: number;
        offset?: number;
        id_gte?: string;
        id_gt?: string;
        id_lte?: string;
        id_lt?: string;
        created_at_after_or_equal?: Date;
        created_at_after?: Date;
        created_at_before_or_equal?: Date;
        created_at_before?: Date;
        id_around?: string;
        created_at_around?: Date;
        sort?: SortParamRequest[];
    }) => Promise<StreamResponse<GetRepliesResponse>>;
    queryMessageFlags: (request?: {
        payload?: QueryMessageFlagsPayload;
    }) => Promise<StreamResponse<QueryMessageFlagsResponse>>;
    muteChannel: (request?: MuteChannelRequest) => Promise<StreamResponse<MuteChannelResponse>>;
    unmuteChannel: (request?: UnmuteChannelRequest) => Promise<StreamResponse<UnmuteResponse>>;
    createPoll: (request: CreatePollRequest) => Promise<StreamResponse<PollResponse>>;
    updatePoll: (request: UpdatePollRequest) => Promise<StreamResponse<PollResponse>>;
    queryPolls: (request?: QueryPollsRequest & {
        user_id?: string;
    }) => Promise<StreamResponse<QueryPollsResponse>>;
    deletePoll: (request: {
        poll_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<Response>>;
    getPoll: (request: {
        poll_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<PollResponse>>;
    updatePollPartial: (request: UpdatePollPartialRequest & {
        poll_id: string;
    }) => Promise<StreamResponse<PollResponse>>;
    createPollOption: (request: CreatePollOptionRequest & {
        poll_id: string;
    }) => Promise<StreamResponse<PollOptionResponse>>;
    updatePollOption: (request: UpdatePollOptionRequest & {
        poll_id: string;
    }) => Promise<StreamResponse<PollOptionResponse>>;
    deletePollOption: (request: {
        poll_id: string;
        option_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<Response>>;
    getPollOption: (request: {
        poll_id: string;
        option_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<PollOptionResponse>>;
    queryPollVotes: (request: QueryPollVotesRequest & {
        poll_id: string;
        user_id?: string;
    }) => Promise<StreamResponse<PollVotesResponse>>;
    updatePushNotificationPreferences: (request: UpsertPushPreferencesRequest) => Promise<StreamResponse<UpsertPushPreferencesResponse>>;
    queryBannedUsers: (request?: {
        payload?: QueryBannedUsersPayload;
    }) => Promise<StreamResponse<QueryBannedUsersResponse>>;
    search: (request?: {
        payload?: SearchPayload;
    }) => Promise<StreamResponse<SearchResponse>>;
    querySegments: (request: QuerySegmentsRequest) => Promise<StreamResponse<QuerySegmentsResponse>>;
    deleteSegment: (request: {
        id: string;
    }) => Promise<StreamResponse<Response>>;
    getSegment: (request: {
        id: string;
    }) => Promise<StreamResponse<GetSegmentResponse>>;
    deleteSegmentTargets: (request: DeleteSegmentTargetsRequest & {
        id: string;
    }) => Promise<StreamResponse<Response>>;
    segmentTargetExists: (request: {
        id: string;
        target_id: string;
    }) => Promise<StreamResponse<Response>>;
    querySegmentTargets: (request: QuerySegmentTargetsRequest & {
        id: string;
    }) => Promise<StreamResponse<QuerySegmentTargetsResponse>>;
    queryThreads: (request?: QueryThreadsRequest) => Promise<StreamResponse<QueryThreadsResponse>>;
    getThread: (request: {
        message_id: string;
        reply_limit?: number;
        participant_limit?: number;
        member_limit?: number;
    }) => Promise<StreamResponse<GetThreadResponse>>;
    updateThreadPartial: (request: UpdateThreadPartialRequest & {
        message_id: string;
    }) => Promise<StreamResponse<UpdateThreadPartialResponse>>;
    unreadCounts: () => Promise<StreamResponse<WrappedUnreadCountsResponse>>;
    unreadCountsBatch: (request: UnreadCountsBatchRequest) => Promise<StreamResponse<UnreadCountsBatchResponse>>;
    sendUserCustomEvent: (request: SendUserCustomEventRequest & {
        user_id: string;
    }) => Promise<StreamResponse<Response>>;
}
